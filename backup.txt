#include <windows.h>
#include <string>
#include <stdio.h>
#include <iostream>
#include <fstream>

using namespace std;


void Menu();

string calcolaRichiesta(string metodo, string url, int nHeaders, string header[], int nCookies, string cookie[], int nCampiForm, string campoForm[], int nParametri, string parametro[], string &server);
string invia(string sendStr, string server);
SOCKET connectToServer(char *szServerName, WORD portNum);
int getHeaderLength(char *content);

HINSTANCE hInst; ///non ho idea di che faccia sta roba
WSADATA wsaData;

int main()
{
    if ( WSAStartup(0x101, &wsaData) != 0)
        return -1;
    cout << "\nAvvio Web\n" << endl;
    std::cin.ignore();
    while(1)
    {
        Menu();
    }
    WSACleanup();

    return 0;
}


void Menu()
{
    string server;
    string sendStr="";
    string url="";

    string metodo[]={"GET", "HEAD", "POST", "OPTIONS", "PUT", "PATCH"};
    int indMetodo=0;

    int nHeaders=0;
    string header[50]={};
    int nCookies=0;
    string cookie[50]={};
    int nParametri=0;
    string parametro[50]={};
    int nCampiForm=0;
    string campoForm[50]={};

    char scelta='a';

    while(1)
    {
        do{
            system("cls");
            std::cout<<metodo[indMetodo]<<": "<<url<<" |\n";
            std::cout<<"\nHeader: \n";
            for(int i=0; i<nHeaders; i++)
            {
                cout<<header[i]<<std::endl;
            }
            std::cout<<"\nCookie: \n";
            for(int i=0; i<nCookies; i++)
            {
                cout<<cookie[i]<<std::endl;
            }
            std::cout<<"\nParametri: \n";
            for(int i=0; i<nParametri; i++)
            {
                cout<<parametro[i]<<std::endl;
            }
            std::cout<<"\nCampi Form: \n";
            for(int i=0; i<nCampiForm; i++)
            {
                cout<<campoForm[i]<<std::endl;
            }

            sendStr=calcolaRichiesta(metodo[indMetodo], url, nHeaders, header, nCookies, cookie, nCampiForm, campoForm, nParametri, parametro, server);
            cout<<"\n"<<sendStr;

            std::cout<<"\n-Esci                 [a]";
            std::cout<<"\n-Invia richiesta      [b]";
            std::cout<<"\n-Pulisci tutto        [c]";
            std::cout<<"\n-Carica da file       [d]";
            std::cout<<"\n-Carica su file       [e]";
            std::cout<<"\n-Carica  url          [f]";
            std::cout<<"\n-Aggiungi header      [g]";
            std::cout<<"\n-Aggiungi cookie      [h]";
            std::cout<<"\n-Aggiungi parametro   [i]";
            std::cout<<"\n-Aggiungi campo form  [j]";
            std::cout<<"\n-Cambia metodo        [k]";
            std::cout<<"\n-Invio da file        [l]";
            std::cout<<"\n-carica file invio    [m]\n\n";

            std::cin>>scelta;
            std::cin.ignore();
        }while(scelta<'a' || scelta>'m' || (scelta=='b' && url==""));
        switch(scelta)
        {
            case 'b':
                {
                    std::ofstream fout("data.txt");
                    string risposta;
                    string data, headerRisposta;
                    risposta=invia(sendStr, server);
                    cout<<"\n\n"<<risposta;
                    fout<<risposta;
                    fout.close();
                    std::cin.ignore();
                }
            break;

            case 'c':
                url="";
                nHeaders=0;
                nCookies=0;
                nParametri=0;
                nCampiForm=0;
            break;

            case 'd':
                {
                    std::ifstream fin("urlSalvato.txt");
                    fin>>url;
                    fin>>indMetodo;
                    fin>>nHeaders;
                    fin>>nCookies;
                    fin>>nParametri;
                    fin>>nCampiForm;
                    for(int i=0; i<nHeaders; i++)
                    {
                        fin>>header[i];
                    }

                    for(int i=0; i<nCookies; i++)
                    {
                        fin>>cookie[i];
                    }

                    for(int i=0; i<nParametri; i++)
                    {
                        fin>>parametro[i];
                    }

                    for(int i=0; i<nCampiForm; i++)
                    {
                        fin>>campoForm[i];
                    }
                    fin.close();
                }

            break;

            case 'e':
                {
                    std::ofstream fout("urlSalvato.txt");
                    fout<<url<<std::endl;
                    fout<<indMetodo<<" "<<nHeaders<<" "<<nCookies<<" "<<nParametri<<" "<<nCampiForm<<std::endl;;
                    for(int i=0; i<nHeaders; i++)
                    {
                        fout<<header[i]<<std::endl;
                    }

                    for(int i=0; i<nCookies; i++)
                    {
                        fout<<cookie[i]<<std::endl;
                    }

                    for(int i=0; i<nParametri; i++)
                    {
                        fout<<parametro[i]<<std::endl;
                    }

                    for(int i=0; i<nCampiForm; i++)
                    {
                        fout<<campoForm[i]<<std::endl;
                    }

                    fout.close();
                }

            break;

            case 'f':

                std::cout<<"\n\nUrl: ";
                std::cin>>url;
                std::cin.ignore();
            break;

            case 'g':
                std::cout<<"\n\nHeader: ";
                std::cin>>header[nHeaders];
                std::cin.ignore();
                nHeaders++;
            break;

            case 'h':
                std::cout<<"\n\nCookie: ";
                std::cin>>cookie[nCookies];
                std::cin.ignore();
                nCookies++;
            break;

            case 'i':
                std::cout<<"\n\nParametro: ";
                std::cin>>parametro[nParametri];
                std::cin.ignore();
                nParametri++;
            break;

            case 'j':
                std::cout<<"\n\nCampo form: ";
                std::cin>>campoForm[nCampiForm];
                std::cin.ignore();
                nCampiForm++;
            break;

            case 'k':
                cout<<"\n\nMetodi:\n";
                for(int i=0; i<6; i++)
                    cout<<i<<": "<<metodo[i]<<endl;
                cin>>indMetodo;
                cin.ignore();
            break;

            case 'l':
                {
                    string url="", tmpUrl;
                    std::ifstream fin("urlPronto.txt");
                    while(!fin.eof())
                    {
                        getline(fin, tmpUrl);
                        url+=tmpUrl+"\t\n";
                        cout<<"\na"<<tmpUrl;
                    }
                    cout<<"\n\nMessaggio salvato:\n"<<url;
                    std::ofstream fout("data.txt");
                    string risposta;
                    string data, headerRisposta;
                    risposta=invia(url, server);
                    cout<<"\nInizio risposta\n"<<risposta<<"\nFine risposta";
                    fout<<risposta;
                    fout.close();
                    std::cin.ignore();
                }

            break;

            case 'm':
                {
                    std::ofstream fout("urlPronto.txt");
                    fout<<sendStr;
                    fout.close();
                    cout<<sendStr;
                    std::cin.ignore();

                }

            break;

            case 'a':
                return;
        }
    }
}

string calcolaRichiesta(string metodo, string url, int nHeaders, string header[], int nCookies, string cookie[], int nCampiForm, string campoForm[], int nParametri, string parametro[], string &server)
{
    string sendBuffer="";
    string filepath, filename;
    string::size_type n;
    //  Elimina https
    if (url.substr(0,7) == "http://")
        url.erase(0,7);

    if (url.substr(0,8) == "https://")
        url.erase(0,8);

    n = url.find('/');
    if (n != string::npos)
    {
        server = url.substr(0,n);
        filepath = url.substr(n);
        n = filepath.rfind('/');
        filename = filepath.substr(n+1);
    }

    else
    {
        server = url;
        filepath = "/";
        filename = "";
    }

    sendBuffer=metodo+" "+filepath;

    for(int i=0; i<nParametri; i++)
        sendBuffer+="?"+parametro[i];

    sendBuffer+=" HTTP/1.0\r\nHost: "+server;

    for(int i=0; i<nHeaders; i++)
    {
        sendBuffer+="\r\n"+header[i];
    }

    if(nCookies>0)
    {
        sendBuffer+="\r\nCookie: "+cookie[0];
        for(int i=1; i<nCookies; i++)
        {
            sendBuffer+=";"+cookie[i];
        }
    }


    if(metodo=="POST")
    {
        /*
        string accCampi=campoForm[0];
        for(int i=1; i<nCampiForm; i++)
            accCampi+="&"+campoForm[i];
        sendBuffer+="\r\nContent-Type: application/x-www-form-urlencoded";
        */
        string accCampi="\r\n{\"username\"=\"admin\", \"password\"=\"admin\"}";
        sendBuffer+="\r\nContent-Type: application/json";
        sendBuffer+="\r\nContent-Length: "+to_string(accCampi.size());

        sendBuffer+="\r\n\r\n";
        sendBuffer+=accCampi;
    }
    else
    sendBuffer+="\r\n\r\n";



    return sendBuffer;
}

int getHeaderLength(char *content)
{
    const char *srchStr1 = "\r\n\r\n", *srchStr2 = "\n\r\n\r";
    char *findPos;
    int ofset = -1;

    findPos = strstr(content, srchStr1);
    if (findPos != NULL)
    {
        ofset = findPos - content;
        ofset += strlen(srchStr1);
    }
    else
    {
        findPos = strstr(content, srchStr2);
        if (findPos != NULL)
        {
            ofset = findPos - content;
            ofset += strlen(srchStr2);
        }
    }
    return ofset;
}

string invia(string sendStr, string server)
{
    const int bufSize = 512;
    char readBuffer[bufSize];//, sendBuffer[bufSize], tmpBuffer[bufSize];
    string tmpBuffer, sendBuffer;
    char *tmpResult=NULL, *result;
    SOCKET conn;
    string filepath, filename;
    long totalBytesRead, thisReadSize, headerLen;

    ///////////// step 1, connect //////////////////////
    conn = connectToServer((char*)server.c_str(), 80);
    ///////////// step 2, send GET request /////////////
    send(conn, sendStr.c_str(), sendStr.size(), 0);
    ///////////// step 3 - get received bytes //////////////// Receive until the peer closes the connection
    totalBytesRead = 0;
    while(1)
    {
        memset(readBuffer, 0, bufSize);
        thisReadSize = recv (conn, readBuffer, bufSize, 0);

        if ( thisReadSize <= 0 )
            break;

        tmpResult = (char*)realloc(tmpResult, thisReadSize+totalBytesRead);

        memcpy(tmpResult+totalBytesRead, readBuffer, thisReadSize);
        totalBytesRead += thisReadSize;
    }
    /*
    headerLen = getHeaderLength(tmpResult);
    long contenLen = totalBytesRead-headerLen;
    */
    result = new char[totalBytesRead+1];
    memcpy(result, tmpResult, totalBytesRead);
    result[totalBytesRead] = 0x0;
    /*
    char *myTmp;

    myTmp = new char[headerLen+1];
    strncpy(myTmp, tmpResult, headerLen);
    myTmp[headerLen] = NULL;
    */

    delete(tmpResult);


    closesocket(conn);

    return(result);
}

SOCKET connectToServer(char *szServerName, WORD portNum)
{
    struct hostent *hp;
    unsigned int addr;
    struct sockaddr_in server;
    SOCKET conn;

    conn = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (conn == INVALID_SOCKET)
        return NULL;

    if(inet_addr(szServerName)==INADDR_NONE)
    {
        hp=gethostbyname(szServerName);
    }
    else
    {
        addr=inet_addr(szServerName);
        hp=gethostbyaddr((char*)&addr,sizeof(addr),AF_INET);
    }

    if(hp==NULL)
    {
        closesocket(conn);
        return NULL;
    }

    server.sin_addr.s_addr=*((unsigned long*)hp->h_addr);
    server.sin_family=AF_INET;
    server.sin_port=htons(portNum);
    if(connect(conn,(struct sockaddr*)&server,sizeof(server)))
    {
        closesocket(conn);
        return NULL;
    }
    return conn;
}




